// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: trip/trip.proto

package trip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TripService_CreateTrip_FullMethodName          = "/trip.TripService/CreateTrip"
	TripService_AcceptTrip_FullMethodName          = "/trip.TripService/AcceptTrip"
	TripService_RejectTrip_FullMethodName          = "/trip.TripService/RejectTrip"
	TripService_GetSuggestedDriver_FullMethodName  = "/trip.TripService/GetSuggestedDriver"
	TripService_GetTripDetail_FullMethodName       = "/trip.TripService/GetTripDetail"
	TripService_GetTripsByPassenger_FullMethodName = "/trip.TripService/GetTripsByPassenger"
	TripService_GetTripsByDriver_FullMethodName    = "/trip.TripService/GetTripsByDriver"
	TripService_GetAllTrips_FullMethodName         = "/trip.TripService/GetAllTrips"
	TripService_UpdateTripStatus_FullMethodName    = "/trip.TripService/UpdateTripStatus"
	TripService_CancelTrip_FullMethodName          = "/trip.TripService/CancelTrip"
	TripService_SubmitReview_FullMethodName        = "/trip.TripService/SubmitReview"
	TripService_GetTripReview_FullMethodName       = "/trip.TripService/GetTripReview"
)

// TripServiceClient is the client API for TripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripServiceClient interface {
	CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripResponse, error)
	AcceptTrip(ctx context.Context, in *AcceptTripRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	RejectTrip(ctx context.Context, in *RejectTripRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetSuggestedDriver(ctx context.Context, in *TripIDRequest, opts ...grpc.CallOption) (*GetSuggestedDriverResponse, error)
	GetTripDetail(ctx context.Context, in *TripIDRequest, opts ...grpc.CallOption) (*GetTripDetailResponse, error)
	GetTripsByPassenger(ctx context.Context, in *GetTripsByUserIDRequest, opts ...grpc.CallOption) (*TripsResponse, error)
	GetTripsByDriver(ctx context.Context, in *GetTripsByUserIDRequest, opts ...grpc.CallOption) (*TripsResponse, error)
	GetAllTrips(ctx context.Context, in *GetAllTripsRequest, opts ...grpc.CallOption) (*PageResponse, error)
	UpdateTripStatus(ctx context.Context, in *UpdateTripStatusRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CancelTrip(ctx context.Context, in *CancelTripRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	SubmitReview(ctx context.Context, in *SubmitReviewRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetTripReview(ctx context.Context, in *TripIDRequest, opts ...grpc.CallOption) (*GetTripReviewResponse, error)
}

type tripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripServiceClient(cc grpc.ClientConnInterface) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTripResponse)
	err := c.cc.Invoke(ctx, TripService_CreateTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) AcceptTrip(ctx context.Context, in *AcceptTripRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, TripService_AcceptTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) RejectTrip(ctx context.Context, in *RejectTripRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, TripService_RejectTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetSuggestedDriver(ctx context.Context, in *TripIDRequest, opts ...grpc.CallOption) (*GetSuggestedDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSuggestedDriverResponse)
	err := c.cc.Invoke(ctx, TripService_GetSuggestedDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetTripDetail(ctx context.Context, in *TripIDRequest, opts ...grpc.CallOption) (*GetTripDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTripDetailResponse)
	err := c.cc.Invoke(ctx, TripService_GetTripDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetTripsByPassenger(ctx context.Context, in *GetTripsByUserIDRequest, opts ...grpc.CallOption) (*TripsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TripsResponse)
	err := c.cc.Invoke(ctx, TripService_GetTripsByPassenger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetTripsByDriver(ctx context.Context, in *GetTripsByUserIDRequest, opts ...grpc.CallOption) (*TripsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TripsResponse)
	err := c.cc.Invoke(ctx, TripService_GetTripsByDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetAllTrips(ctx context.Context, in *GetAllTripsRequest, opts ...grpc.CallOption) (*PageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageResponse)
	err := c.cc.Invoke(ctx, TripService_GetAllTrips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) UpdateTripStatus(ctx context.Context, in *UpdateTripStatusRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, TripService_UpdateTripStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) CancelTrip(ctx context.Context, in *CancelTripRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, TripService_CancelTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) SubmitReview(ctx context.Context, in *SubmitReviewRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, TripService_SubmitReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetTripReview(ctx context.Context, in *TripIDRequest, opts ...grpc.CallOption) (*GetTripReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTripReviewResponse)
	err := c.cc.Invoke(ctx, TripService_GetTripReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TripServiceServer is the server API for TripService service.
// All implementations must embed UnimplementedTripServiceServer
// for forward compatibility.
type TripServiceServer interface {
	CreateTrip(context.Context, *CreateTripRequest) (*CreateTripResponse, error)
	AcceptTrip(context.Context, *AcceptTripRequest) (*MessageResponse, error)
	RejectTrip(context.Context, *RejectTripRequest) (*MessageResponse, error)
	GetSuggestedDriver(context.Context, *TripIDRequest) (*GetSuggestedDriverResponse, error)
	GetTripDetail(context.Context, *TripIDRequest) (*GetTripDetailResponse, error)
	GetTripsByPassenger(context.Context, *GetTripsByUserIDRequest) (*TripsResponse, error)
	GetTripsByDriver(context.Context, *GetTripsByUserIDRequest) (*TripsResponse, error)
	GetAllTrips(context.Context, *GetAllTripsRequest) (*PageResponse, error)
	UpdateTripStatus(context.Context, *UpdateTripStatusRequest) (*MessageResponse, error)
	CancelTrip(context.Context, *CancelTripRequest) (*MessageResponse, error)
	SubmitReview(context.Context, *SubmitReviewRequest) (*MessageResponse, error)
	GetTripReview(context.Context, *TripIDRequest) (*GetTripReviewResponse, error)
	mustEmbedUnimplementedTripServiceServer()
}

// UnimplementedTripServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTripServiceServer struct{}

func (UnimplementedTripServiceServer) CreateTrip(context.Context, *CreateTripRequest) (*CreateTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrip not implemented")
}
func (UnimplementedTripServiceServer) AcceptTrip(context.Context, *AcceptTripRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTrip not implemented")
}
func (UnimplementedTripServiceServer) RejectTrip(context.Context, *RejectTripRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTrip not implemented")
}
func (UnimplementedTripServiceServer) GetSuggestedDriver(context.Context, *TripIDRequest) (*GetSuggestedDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestedDriver not implemented")
}
func (UnimplementedTripServiceServer) GetTripDetail(context.Context, *TripIDRequest) (*GetTripDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTripDetail not implemented")
}
func (UnimplementedTripServiceServer) GetTripsByPassenger(context.Context, *GetTripsByUserIDRequest) (*TripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTripsByPassenger not implemented")
}
func (UnimplementedTripServiceServer) GetTripsByDriver(context.Context, *GetTripsByUserIDRequest) (*TripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTripsByDriver not implemented")
}
func (UnimplementedTripServiceServer) GetAllTrips(context.Context, *GetAllTripsRequest) (*PageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTrips not implemented")
}
func (UnimplementedTripServiceServer) UpdateTripStatus(context.Context, *UpdateTripStatusRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTripStatus not implemented")
}
func (UnimplementedTripServiceServer) CancelTrip(context.Context, *CancelTripRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTrip not implemented")
}
func (UnimplementedTripServiceServer) SubmitReview(context.Context, *SubmitReviewRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReview not implemented")
}
func (UnimplementedTripServiceServer) GetTripReview(context.Context, *TripIDRequest) (*GetTripReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTripReview not implemented")
}
func (UnimplementedTripServiceServer) mustEmbedUnimplementedTripServiceServer() {}
func (UnimplementedTripServiceServer) testEmbeddedByValue()                     {}

// UnsafeTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripServiceServer will
// result in compilation errors.
type UnsafeTripServiceServer interface {
	mustEmbedUnimplementedTripServiceServer()
}

func RegisterTripServiceServer(s grpc.ServiceRegistrar, srv TripServiceServer) {
	// If the following call pancis, it indicates UnimplementedTripServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TripService_ServiceDesc, srv)
}

func _TripService_CreateTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CreateTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CreateTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CreateTrip(ctx, req.(*CreateTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_AcceptTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).AcceptTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_AcceptTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).AcceptTrip(ctx, req.(*AcceptTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_RejectTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).RejectTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_RejectTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).RejectTrip(ctx, req.(*RejectTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetSuggestedDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetSuggestedDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetSuggestedDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetSuggestedDriver(ctx, req.(*TripIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetTripDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTripDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTripDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTripDetail(ctx, req.(*TripIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetTripsByPassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTripsByPassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTripsByPassenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTripsByPassenger(ctx, req.(*GetTripsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetTripsByDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTripsByDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTripsByDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTripsByDriver(ctx, req.(*GetTripsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetAllTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetAllTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetAllTrips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetAllTrips(ctx, req.(*GetAllTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_UpdateTripStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTripStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).UpdateTripStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_UpdateTripStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).UpdateTripStatus(ctx, req.(*UpdateTripStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_CancelTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CancelTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CancelTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CancelTrip(ctx, req.(*CancelTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_SubmitReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).SubmitReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_SubmitReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).SubmitReview(ctx, req.(*SubmitReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetTripReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTripReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTripReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTripReview(ctx, req.(*TripIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TripService_ServiceDesc is the grpc.ServiceDesc for TripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trip.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrip",
			Handler:    _TripService_CreateTrip_Handler,
		},
		{
			MethodName: "AcceptTrip",
			Handler:    _TripService_AcceptTrip_Handler,
		},
		{
			MethodName: "RejectTrip",
			Handler:    _TripService_RejectTrip_Handler,
		},
		{
			MethodName: "GetSuggestedDriver",
			Handler:    _TripService_GetSuggestedDriver_Handler,
		},
		{
			MethodName: "GetTripDetail",
			Handler:    _TripService_GetTripDetail_Handler,
		},
		{
			MethodName: "GetTripsByPassenger",
			Handler:    _TripService_GetTripsByPassenger_Handler,
		},
		{
			MethodName: "GetTripsByDriver",
			Handler:    _TripService_GetTripsByDriver_Handler,
		},
		{
			MethodName: "GetAllTrips",
			Handler:    _TripService_GetAllTrips_Handler,
		},
		{
			MethodName: "UpdateTripStatus",
			Handler:    _TripService_UpdateTripStatus_Handler,
		},
		{
			MethodName: "CancelTrip",
			Handler:    _TripService_CancelTrip_Handler,
		},
		{
			MethodName: "SubmitReview",
			Handler:    _TripService_SubmitReview_Handler,
		},
		{
			MethodName: "GetTripReview",
			Handler:    _TripService_GetTripReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trip/trip.proto",
}
